name: Spring CI/CD

# 트리거
on:
  push:
    branches:
      - auth

# 해야 될 일
jobs:
  cicd-deploy:
    runs-on: ubuntu-latest

    steps:
      # GitHub Repository 파일 체크아웃
      - name: Github Repository내 파일들 checkout 수행
        uses: actions/checkout@v4

      # JDK 17 설치
      - name: JDK 17 버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # application.yml 동적 생성
      - name: application.yml 동적 생성
        run: |
          echo "${{ secrets.APPLICATION_AUTH }}" > ./src/main/resources/application.yml
          ls ./src/main/resources/application.yml

      # 빌드 수행
      - name: 단위 테스트 및 빌드
        run: |
          if [ ! -x ./gradlew ]; then chmod +x ./gradlew; fi
          ./gradlew clean build
          ls ./build/libs

      # 빌드 결과물 이름 변경
      - name: 관리상 빌드된 결과물의 이름을 변경 처리
        run: |
          mv ./build/libs/*SNAPSHOT.jar ./run.jar
          ls

      # EC2로 빌드된 JAR 파일 업로드
      - name: EC2에 jar파일 업로드
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: run.jar
          target: /home/ubuntu/server/auth

      # EC2에서 기존 서버 정리 및 애플리케이션 실행
      - name: SSH로 EC2 접속 후 서버 가동 및 Redis(Docker) 설정
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script_stop: false
          script: |
            # Docker 설치 여부 확인 및 설치
            if ! command -v docker &> /dev/null
            then
              echo "Docker not found. Installing..."
              sudo apt update
              sudo apt install -y docker.io
              sudo systemctl enable docker
              sudo systemctl start docker
            else
              echo "Docker is already installed."
            fi

            # 현재 사용자를 docker 그룹에 추가 (권한 문제 해결)
            sudo usermod -aG docker $USER
            newgrp docker

            # Redis 컨테이너 실행 (sudo 추가)
            if [ ! "$(sudo docker ps -q -f name=redis)" ]; then
                if [ "$(sudo docker ps -aq -f status=exited -f name=redis)" ]; then
                    # 기존 중지된 컨테이너 삭제
                    sudo docker rm redis
                fi
                # Redis 이미지 다운로드 및 컨테이너 실행
                sudo docker pull redis:latest
                sudo docker run -d --name redis --restart always -p 6379:6379 redis:latest
            else
                echo "Redis container is already running."
            fi

            # 기존 서버 정리 및 실행
            sudo rm -rf /home/ubuntu/server/auth
            sudo mkdir -p /home/ubuntu/server/auth
            sudo mv /home/ubuntu/server/auth/run.jar /home/ubuntu/server/auth/run.jar
            cd /home/ubuntu/server/auth

            # 기존 실행 중인 애플리케이션 종료
            sudo fuser -k -n tcp 8081 || true

            # 애플리케이션 실행
            nohup java -jar run.jar > ./output.log 2>&1 &