name: Spring CI/CD - Popup

# 트리거: popup 브랜치에 코드가 푸시되면 실행
on:
  push:
    branches:
      - popup

jobs:
  cicd-deploy:
    runs-on: ubuntu-latest

    steps:
      # GitHub Repository의 파일들 체크아웃
      - name: Checkout Repository Files
        uses: actions/checkout@v4

      # JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # application.yml 동적 생성 (secret에 APPLICATION_POPUP 등록 필요)
      - name: Generate application.yml dynamically
        run: |
          echo "${{ secrets.APPLICATION_POPUP }}" > ./src/main/resources/application.yml
          ls ./src/main/resources/application.yml

      # 빌드 수행 (테스트 포함)
      - name: Run Tests and Build
        run: |
          if [ ! -x ./gradlew ]; then chmod +x ./gradlew; fi
          ./gradlew clean build
          ls ./build/libs

      # 빌드 결과물 이름 변경 (빌드 산출물의 이름을 run.jar로 변경)
      - name: Rename Build Artifact
        run: |
          mv ./build/libs/*SNAPSHOT.jar ./run.jar
          ls

      # EC2로 빌드된 JAR 파일 업로드
      - name: Upload JAR to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST_POPUP }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: run.jar
          target: /home/ubuntu/server/demo

      # EC2에서 기존 서버 정리 후, 새 JAR 파일 배포 및 서버 가동
      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST_POPUP }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script_stop: true
          script: |
            rm -rf /home/ubuntu/server/popup
            mkdir -p /home/ubuntu/server/popup
            mv /home/ubuntu/server/demo/run.jar /home/ubuntu/server/popup/run.jar
            cd /home/ubuntu/server/popup
            sudo fuser -k -n tcp 8082 || true
            nohup java -jar run.jar > ./output.log 2>&1 &
            rm -rf /home/ubuntu/server/demo
