name: Spring CI/CD - Popup

on:
  push:
    branches:
      - pop-up

jobs:
  cicd-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. GitHub 저장소에서 코드 체크아웃
      - name: GitHub 저장소에서 코드 체크아웃
        uses: actions/checkout@v4

      # 2. JDK 17 설치
      - name: JDK 17 설치
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # 3. application.yml 동적 생성 (GitHub Secrets에 APPLICATION_POPUP 등록 필요)
      - name:  application.yml 동적 생성
        run: |
          echo "${{ secrets.APPLICATION_POPUP }}" > ./src/main/resources/application.yml
          cat ./src/main/resources/application.yml

      # 4. Gradle 빌드 및 테스트 수행
      - name: Gradle 빌드 및 테스트 수행
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test
          ls ./build/libs

      # 5. 빌드 산출물 이름 변경 (생성된 JAR 파일을 run.jar로 변경)
      - name: 빌드 산출물 이름 변경
        run: |
          mv ./build/libs/*SNAPSHOT.jar ./run.jar
          ls

      # 6. EC2로 JAR 파일 업로드 (SCP 사용)
      - name: EC2로 JAR 파일 업로드
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST_POPUP }}
          username: ${{ secrets.EC2_POPUP_USER }}
          key: ${{ secrets.EC2_POPUP_KEY }}
          source: run.jar
          target: /home/ubuntu/server/demo/

      # 7. EC2에서 기존 서버 정리 후, 새 JAR 파일 배포 및 서버 가동 (SSH 사용)
      - name:  EC2에서 기존 서버 정리 후, 새 JAR 파일 배포 및 서버 가동
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST_POPUP }}
          username: ${{ secrets.EC2_POPUP_USER }}
          key: ${{ secrets.EC2_POPUP_KEY }}
          script_stop: true
          script: |
            # 기존 배포 폴더 제거 후 새 폴더 생성
            rm -rf /home/ubuntu/server/popup
            mkdir -p /home/ubuntu/server/popup
            # 업로드된 JAR 파일 이동
            mv /home/ubuntu/server/demo/run.jar /home/ubuntu/server/popup/run.jar
            cd /home/ubuntu/server/popup
            # 포트 8082를 사용 중인 프로세스 종료 (없으면 무시)
            sudo fuser -k -n tcp 8082 || true
            # 백그라운드로 애플리케이션 실행 및 로그 파일 생성
            nohup java -jar run.jar > output.log 2>&1 &
            # 임시 폴더 정리
            rm -rf /home/ubuntu/server/demo
